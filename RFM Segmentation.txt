DROP DATABASE IF EXISTS RFM_SALES;

CREATE DATABASE RFM_SALES;

-- Since we have created the database let's insert the data from the csv file ('Sales Data for RFM Segmentation.csv') using the Table Data Import Wizard


-- Now that we have the data loaded in our table let's explore the 'sales_sample_data' Table from the 'rfm_sales' Database
SELECT 
    *
FROM
    rfm_sales.sales_sample_data;

-- Checking in which format the ORDERDATE Field is in
SELECT 
    ORDERDATE
FROM
    rfm_sales.sales_sample_data
LIMIT 10;
-- 24/2/03; Not in a Proper Data Format; It has dd/mm/yy

-- Formatting in a Proper Date Field using 'STR_TO_DATE'
SELECT 
    ORDERDATE,
    STR_TO_DATE(ORDERDATE, '%d/%m/%y') AS FORMATTED_DATE
FROM
    rfm_sales.sales_sample_data;

SELECT 
    ORDERDATE,
    YEAR(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) AS Year,
    MONTHNAME(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) AS MONTH_NAME
FROM
    rfm_sales.sales_sample_data;

SELECT 
    MIN(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) AS FIRST_ORDER_DATE,
    MAX(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) AS LAST_ORDER_DATE
FROM
    rfm_sales.sales_sample_data;

-- Updating the ORDERDATE FIELD FROM THE sales_sample_data TABLE
SET SQL_SAFE_UPDATES = 0;

UPDATE sales_sample_data 
SET 
    ORDERDATE = STR_TO_DATE(ORDERDATE, '%d/%m/%y');

SELECT 
    *
FROM
    sales_sample_data
LIMIT 10;

SELECT 
    CUSTOMERNAME, MAX(ORDERDATE) AS LAST_ORDER_DATE
FROM
    SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME;

-- LAST TRANSACTION DATE OF THE BUSINESS: 2005-05-31
SELECT 
    CUSTOMERNAME, MAX(ORDERDATE) AS LAST_ORDER_DATE
FROM
    SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME
ORDER BY LAST_ORDER_DATE;


SELECT 
    CUSTOMERNAME, MAX(ORDERDATE) AS LAST_ORDER_DATE
FROM
    SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME
ORDER BY LAST_ORDER_DATE;


SELECT 
    CUSTOMERNAME,
    MAX(ORDERDATE) AS LAST_ORDER_DATE,
    DATEDIFF(CURDATE(), MAX(ORDERDATE)) AS RECENCY
FROM
    SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME;

SELECT curdate();


SELECT 
    CUSTOMERNAME, MAX(ORDERDATE) AS LAST_ORDER_DATE
FROM
    SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME;

SELECT 
    MAX(ORDERDATE) AS LAST_ORDER_DATE
FROM
    SALES_SAMPLE_DATA; -- 2005-05-31

-- datediff: difference between max (latest) - min (earliest) in days 
-- datediff: difference between date1 - date2 in days 
-- datediff: difference between 2005-05-31 - each customer's last transacion date in days 

SELECT 
    MAX(ORDERDATE)
FROM
    SALES_SAMPLE_DATA;

SELECT 
    CUSTOMERNAME,
    MAX(ORDERDATE) AS LAST_ORDER_DATE,
    DATEDIFF((SELECT 
                    MAX(ORDERDATE)
                FROM
                    SALES_SAMPLE_DATA),
            MAX(ORDERDATE)) AS RECENCY
FROM
    SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME;


SELECT 
    CUSTOMERNAME,
    MAX(ORDERDATE) AS LAST_ORDER_DATE,
    DATEDIFF(CURDATE(), MAX(ORDERDATE)) AS RECENCY
FROM
    SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME;




/* RFM Segmentation: 
Segment the Customers based on their Recency (R), Frequency (F) & Monetary (M)
*/

CREATE OR REPLACE VIEW RFM_SCORE_DATA AS
WITH CUSTOMER_AGGREGATED_DATA AS
(SELECT
	CUSTOMERNAME,
    DATEDIFF((SELECT MAX(ORDERDATE) FROM SALES_SAMPLE_DATA), MAX(ORDERDATE)) AS RECENCY_VALUE,
    COUNT(DISTINCT ORDERNUMBER) AS FREQUENCY_VALUE,
    ROUND(SUM(SALES),0) AS MONETARY_VALUE
FROM SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME),

RFM_SCORE AS
(SELECT 
	C.*,
    NTILE(5) OVER (ORDER BY RECENCY_VALUE DESC) AS R_SCORE,
    NTILE(5) OVER (ORDER BY FREQUENCY_VALUE ASC) AS F_SCORE,
    NTILE(5) OVER (ORDER BY MONETARY_VALUE ASC) AS M_SCORE
FROM CUSTOMER_AGGREGATED_DATA AS C)

SELECT
	R.CUSTOMERNAME,
    R.RECENCY_VALUE,
    R_SCORE,
    R.FREQUENCY_VALUE,
    F_SCORE,
    R.MONETARY_VALUE,
    M_SCORE,
    (R_SCORE + F_SCORE + M_SCORE) AS TOTAL_RFM_SCORE,
    CONCAT_WS('', R_SCORE, F_SCORE, M_SCORE) AS RFM_SCORE_COMBINATION
FROM RFM_SCORE AS R;

-- Common Table Expression (CTE)
-- Window Function (NTILE)
-- VIEW (Function)

SELECT 
    *
FROM
    RFM_SCORE_DATA
WHERE
    RFM_SCORE_COMBINATION = '111';


SELECT 
    RFM_SCORE_COMBINATION
FROM
    RFM_SCORE_DATA;


-- Let's Create the Customer Segment using the RFM_SCORE_COMBINATION
CREATE OR REPLACE VIEW RFM_ANALYSIS AS
SELECT 
    RFM_SCORE_DATA.*,
    CASE
        WHEN RFM_SCORE_COMBINATION IN (455, 515, 542, 544, 552, 553, 452, 545, 551, 554, 555) THEN 'Champions'
        WHEN RFM_SCORE_COMBINATION IN (344, 345, 353, 354, 355, 414, 415, 443, 451, 342, 351, 352, 441, 442, 444, 445, 453, 454, 541, 543) THEN 'Loyal Customers'
        WHEN RFM_SCORE_COMBINATION IN (513, 413, 511, 411, 512, 341, 412, 343, 514) THEN 'Potential Loyalists'
        WHEN RFM_SCORE_COMBINATION IN (214, 211, 212, 213, 241, 251, 312, 314, 311, 313, 315, 243, 245, 252, 253, 255, 242, 244, 254) THEN 'Promising Customers'
        WHEN RFM_SCORE_COMBINATION IN (141, 142,143,144,151,152,155,145,153,154,215) THEN 'Needs Attention'
        WHEN RFM_SCORE_COMBINATION IN (113, 111, 112, 114, 115) THEN 'About to Sleep'
    ELSE 'Other'
    END AS CUSTOMER_SEGMENT
FROM RFM_SCORE_DATA;


-- Summary of the Different Segment
SELECT 
    CUSTOMER_SEGMENT,
    COUNT(*) AS NUMBER_OF_CUSTOMERS,
    ROUND(AVG(MONETARY_VALUE), 0) AS AVERAGE_MONETARY_VALUE
FROM
    RFM_ANALYSIS
GROUP BY CUSTOMER_SEGMENT;





